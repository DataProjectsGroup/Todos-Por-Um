#!/bin/bash

# Script para Verificar Configura√ß√£o SSL Existente
# Verifica o que seu amigo j√° configurou no servidor

echo "üîç VERIFICANDO CONFIGURA√á√ÉO SSL EXISTENTE"
echo "================================================"
echo "üìÖ Data/Hora: $(date)"
echo ""

# 1. Verificar nginx nativo
echo "1Ô∏è‚É£ NGINX NATIVO"
echo "-----------------------------------"
if command -v nginx &> /dev/null; then
    echo "‚úÖ Nginx nativo instalado"
    echo "üìä Vers√£o: $(nginx -v 2>&1)"
    
    if systemctl is-active --quiet nginx; then
        echo "‚úÖ Nginx est√° rodando"
    else
        echo "‚ùå Nginx n√£o est√° rodando"
    fi
    
    # Verificar configura√ß√£o
    echo "üß™ Testando configura√ß√£o:"
    if nginx -t 2>/dev/null; then
        echo "‚úÖ Configura√ß√£o nginx v√°lida"
    else
        echo "‚ö†Ô∏è Problemas na configura√ß√£o nginx"
        echo "üìù Detalhes:"
        nginx -t
    fi
else
    echo "‚ùå Nginx nativo n√£o est√° instalado"
fi
echo ""

# 2. Verificar certbot/Let's Encrypt
echo "2Ô∏è‚É£ CERTIFICADOS SSL"
echo "-----------------------------------"
if command -v certbot &> /dev/null; then
    echo "‚úÖ Certbot instalado"
    echo "üìä Vers√£o: $(certbot --version 2>/dev/null | head -n1)"
    
    # Verificar certificados
    if [ -d "/etc/letsencrypt/live" ]; then
        echo "üîí Certificados SSL encontrados:"
        ls -la /etc/letsencrypt/live/ | grep -v "^total" | grep -v "README"
        
        # Mostrar detalhes dos certificados
        for domain_dir in /etc/letsencrypt/live/*/; do
            if [ -d "$domain_dir" ]; then
                domain=$(basename "$domain_dir")
                echo ""
                echo "üìã Certificado para: $domain"
                if [ -f "$domain_dir/fullchain.pem" ]; then
                    expire_date=$(openssl x509 -enddate -noout -in "$domain_dir/fullchain.pem" 2>/dev/null | cut -d= -f2)
                    echo "   üìÖ Expira em: $expire_date"
                    
                    # Verificar se est√° pr√≥ximo do vencimento (30 dias)
                    if openssl x509 -checkend 2592000 -noout -in "$domain_dir/fullchain.pem" 2>/dev/null; then
                        echo "   ‚úÖ Certificado v√°lido por mais de 30 dias"
                    else
                        echo "   ‚ö†Ô∏è Certificado expira em menos de 30 dias"
                    fi
                fi
            fi
        done
    else
        echo "‚ùå Nenhum certificado SSL encontrado"
        echo "üí° Execute: certbot --nginx"
    fi
else
    echo "‚ùå Certbot n√£o est√° instalado"
    echo "üí° Execute: apt install certbot python3-certbot-nginx"
fi
echo ""

# 3. Verificar portas
echo "3Ô∏è‚É£ PORTAS DE REDE"
echo "-----------------------------------"
echo "üì° Portas ativas:"
ss -tlnp | grep -E ":(80|443|22)" | while read line; do
    port=$(echo "$line" | grep -o ":[0-9]*" | head -n1 | cut -d: -f2)
    process=$(echo "$line" | grep -o "users:(([^)]*" | cut -d'(' -f3 | cut -d',' -f1)
    
    case $port in
        80)  echo "   üåê HTTP  (80):  $process" ;;
        443) echo "   üîí HTTPS (443): $process" ;;
        22)  echo "   üîë SSH   (22):  $process" ;;
        *)   echo "   üì° Port ($port): $process" ;;
    esac
done
echo ""

# 4. Verificar sites nginx
echo "4Ô∏è‚É£ SITES NGINX CONFIGURADOS"
echo "-----------------------------------"
if [ -d "/etc/nginx/sites-available" ]; then
    echo "üìÅ Sites dispon√≠veis:"
    ls -la /etc/nginx/sites-available/ | grep -v "^total" | grep -v "^d" | awk '{print "   üìÑ " $9}'
    
    echo ""
    echo "üîó Sites habilitados:"
    if [ -d "/etc/nginx/sites-enabled" ]; then
        ls -la /etc/nginx/sites-enabled/ | grep -v "^total" | grep -v "^d" | awk '{print "   ‚úÖ " $9}'
    else
        echo "   ‚ùå Diret√≥rio sites-enabled n√£o existe"
    fi
else
    echo "‚ùå Estrutura de sites nginx n√£o encontrada"
    echo "üí° Nginx pode estar usando /etc/nginx/conf.d/"
    
    if [ -d "/etc/nginx/conf.d" ]; then
        echo "üìÅ Configura√ß√µes em conf.d:"
        ls -la /etc/nginx/conf.d/ | grep -v "^total" | grep "\.conf" | awk '{print "   üìÑ " $9}'
    fi
fi
echo ""

# 5. Verificar diret√≥rio web
echo "5Ô∏è‚É£ DIRET√ìRIO WEB"
echo "-----------------------------------"
common_dirs=("/var/www/html" "/var/www" "/usr/share/nginx/html")

for dir in "${common_dirs[@]}"; do
    if [ -d "$dir" ]; then
        echo "üìÅ $dir existe"
        if [ -f "$dir/index.html" ] || [ -f "$dir/index.nginx-debian.html" ]; then
            echo "   ‚úÖ Cont√©m arquivos web"
        else
            echo "   üìù Vazio ou sem index"
        fi
    fi
done
echo ""

# 6. Verificar firewall
echo "6Ô∏è‚É£ FIREWALL"
echo "-----------------------------------"
if command -v ufw &> /dev/null; then
    echo "üî• UFW Status:"
    ufw status | head -20
else
    echo "‚ÑπÔ∏è UFW n√£o est√° instalado"
fi

if command -v iptables &> /dev/null; then
    echo ""
    echo "üî• Regras iptables para HTTP/HTTPS:"
    iptables -L INPUT -n | grep -E "(80|443)" | head -5 || echo "   Nenhuma regra espec√≠fica"
fi
echo ""

# 7. Testar conectividade
echo "7Ô∏è‚É£ TESTE DE CONECTIVIDADE"
echo "-----------------------------------"
echo "üåê Testando HTTP (porta 80):"
if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1 --max-time 5 2>/dev/null | grep -q "200\|301\|302"; then
    http_code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1 --max-time 5 2>/dev/null)
    echo "   ‚úÖ Respondendo: HTTP $http_code"
else
    echo "   ‚ùå N√£o responde na porta 80"
fi

echo "üîí Testando HTTPS (porta 443):"
if curl -s -o /dev/null -w "%{http_code}" https://127.0.0.1 -k --max-time 5 2>/dev/null | grep -q "200\|301\|302"; then
    https_code=$(curl -s -o /dev/null -w "%{http_code}" https://127.0.0.1 -k --max-time 5 2>/dev/null)
    echo "   ‚úÖ Respondendo: HTTPS $https_code"
else
    echo "   ‚ùå N√£o responde na porta 443"
fi
echo ""

# 8. Verificar Docker
echo "8Ô∏è‚É£ CONTAINERS DOCKER"
echo "-----------------------------------"
if command -v docker &> /dev/null; then
    echo "üê≥ Docker instalado"
    
    running_containers=$(docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null)
    if [ ! -z "$running_containers" ]; then
        echo "üì¶ Containers rodando:"
        echo "$running_containers"
    else
        echo "üì¶ Nenhum container rodando"
    fi
    
    # Verificar se existe container do site
    if docker ps -a -q -f name=donation-site | grep -q .; then
        echo "üéØ Container donation-site encontrado"
        docker ps -a --filter name=donation-site --format "table {{.Names}}\t{{.Status}}"
    fi
else
    echo "‚ÑπÔ∏è Docker n√£o est√° instalado"
fi
echo ""

# 9. Resumo e recomenda√ß√µes
echo "üéØ RESUMO E RECOMENDA√á√ïES"
echo "================================================"

# Verificar se tudo est√° pronto para migra√ß√£o
ssl_ready=false
nginx_ready=false

if [ -d "/etc/letsencrypt/live" ] && command -v nginx &> /dev/null; then
    ssl_ready=true
fi

if systemctl is-active --quiet nginx; then
    nginx_ready=true
fi

if [ "$ssl_ready" = true ] && [ "$nginx_ready" = true ]; then
    echo "‚úÖ PRONTO PARA MIGRA√á√ÉO!"
    echo "   ‚Ä¢ Nginx nativo funcionando"
    echo "   ‚Ä¢ Certificados SSL configurados"
    echo "   ‚Ä¢ Portas 80 e 443 ativas"
    echo ""
    echo "üìã Pr√≥ximos passos:"
    echo "   1. Execute: git pull origin main"
    echo "   2. Execute: chmod +x migrate-to-ssl.sh"
    echo "   3. Execute: sudo ./migrate-to-ssl.sh"
else
    echo "‚ö†Ô∏è CONFIGURA√á√ÉO INCOMPLETA"
    
    if [ "$nginx_ready" = false ]; then
        echo "   ‚ùå Nginx nativo n√£o est√° funcionando"
        echo "      üí° Execute: systemctl start nginx"
    fi
    
    if [ "$ssl_ready" = false ]; then
        echo "   ‚ùå Certificados SSL n√£o encontrados"
        echo "      üí° Execute: certbot --nginx"
    fi
fi

echo ""
echo "üìû COMANDOS √öTEIS PARA SEU AMIGO:"
echo "   ‚Ä¢ Instalar certbot: apt install certbot python3-certbot-nginx"
echo "   ‚Ä¢ Configurar SSL: certbot --nginx"
echo "   ‚Ä¢ Verificar nginx: systemctl status nginx"
echo "   ‚Ä¢ Testar config: nginx -t"
echo "================================================"