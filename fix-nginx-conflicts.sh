#!/bin/bash

# Script para Corrigir Conflitos do Nginx
# Remove site padr√£o e configura prioridades corretas

VPS_IP="144.91.122.53"
DOMAIN="todospor1.org"
SITE_DIR="/var/www/todos-por-um"

echo "üîß CORRIGINDO CONFLITOS NGINX"
echo "========================================"
echo "üåê Dom√≠nio: $DOMAIN"
echo "üñ•Ô∏è IP: $VPS_IP"
echo ""

# Verificar se est√° rodando como root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Este script precisa ser executado como root"
    echo "üí° Execute: sudo ./fix-nginx-conflicts.sh"
    exit 1
fi

# 1. Identificar conflitos
echo "1Ô∏è‚É£ IDENTIFICANDO CONFLITOS"
echo "-----------------------------------"

echo "üìã Sites habilitados atualmente:"
ls -la /etc/nginx/sites-enabled/ 2>/dev/null | grep -v "^total" | grep -v "^d"

echo ""
echo "üîç Verificando conflitos de server_name..."
grep -r "server_name.*$DOMAIN" /etc/nginx/sites-enabled/ 2>/dev/null || echo "   Nenhum conflito direto encontrado"
grep -r "server_name.*$VPS_IP" /etc/nginx/sites-enabled/ 2>/dev/null || echo "   Nenhum conflito de IP encontrado"

echo ""

# 2. Desabilitar site padr√£o
echo "2Ô∏è‚É£ DESABILITANDO SITE PADR√ÉO"
echo "-----------------------------------"

# Remover links simb√≥licos do site padr√£o
default_sites=("default" "000-default" "default.conf")

for site in "${default_sites[@]}"; do
    if [ -L "/etc/nginx/sites-enabled/$site" ]; then
        echo "üõë Removendo site padr√£o: $site"
        rm -f "/etc/nginx/sites-enabled/$site"
    fi
done

# Verificar se ainda existe algum site padr√£o ativo
if [ -f "/etc/nginx/sites-enabled/default" ]; then
    echo "üõë Removendo site padr√£o restante"
    rm -f /etc/nginx/sites-enabled/default
fi

echo "‚úÖ Sites padr√£o removidos"
echo ""

# 3. Verificar configura√ß√µes conflitantes
echo "3Ô∏è‚É£ VERIFICANDO CONFIGURA√á√ïES EXISTENTES"
echo "-----------------------------------"

# Procurar por outras configura√ß√µes que usam o mesmo dom√≠nio
conflicting_configs=$(grep -l "server_name.*$DOMAIN" /etc/nginx/sites-available/* 2>/dev/null | grep -v "todos-por-um")

if [ ! -z "$conflicting_configs" ]; then
    echo "‚ö†Ô∏è Configura√ß√µes conflitantes encontradas:"
    for config in $conflicting_configs; do
        config_name=$(basename "$config")
        echo "   üìÑ $config_name"
        
        # Perguntar se deve desabilitar
        echo "üîß Desabilitando configura√ß√£o conflitante: $config_name"
        rm -f "/etc/nginx/sites-enabled/$config_name"
    done
else
    echo "‚úÖ Nenhuma configura√ß√£o conflitante encontrada"
fi
echo ""

# 4. Verificar se nosso site est√° ativo
echo "4Ô∏è‚É£ VERIFICANDO NOSSO SITE"
echo "-----------------------------------"

if [ -L "/etc/nginx/sites-enabled/todos-por-um" ]; then
    echo "‚úÖ Site todos-por-um est√° habilitado"
else
    echo "üîß Habilitando site todos-por-um..."
    ln -sf /etc/nginx/sites-available/todos-por-um /etc/nginx/sites-enabled/
    echo "‚úÖ Site habilitado"
fi

# Verificar se os arquivos existem
if [ -f "$SITE_DIR/index.html" ]; then
    echo "‚úÖ Arquivo index.html encontrado"
else
    echo "‚ùå Arquivo index.html n√£o encontrado em $SITE_DIR"
    echo "üìã Conte√∫do do diret√≥rio:"
    ls -la $SITE_DIR/ 2>/dev/null || echo "   Diret√≥rio n√£o existe"
fi
echo ""

# 5. Configurar prioridade do site
echo "5Ô∏è‚É£ CONFIGURANDO PRIORIDADE"
echo "-----------------------------------"

# Renomear para garantir prioridade (nginx carrega em ordem alfab√©tica)
if [ -f "/etc/nginx/sites-available/todos-por-um" ]; then
    if [ ! -f "/etc/nginx/sites-available/000-todos-por-um" ]; then
        echo "üîß Renomeando para garantir prioridade..."
        mv /etc/nginx/sites-available/todos-por-um /etc/nginx/sites-available/000-todos-por-um
        rm -f /etc/nginx/sites-enabled/todos-por-um
        ln -sf /etc/nginx/sites-available/000-todos-por-um /etc/nginx/sites-enabled/000-todos-por-um
        echo "‚úÖ Prioridade configurada"
    else
        echo "‚úÖ Prioridade j√° configurada"
    fi
fi
echo ""

# 6. Testar configura√ß√£o
echo "6Ô∏è‚É£ TESTANDO CONFIGURA√á√ÉO"
echo "-----------------------------------"

echo "üß™ Testando sintaxe nginx..."
if nginx -t; then
    echo "‚úÖ Configura√ß√£o nginx v√°lida"
else
    echo "‚ùå Erro na configura√ß√£o nginx"
    echo ""
    echo "üìù Detalhes do erro:"
    nginx -t
    exit 1
fi
echo ""

# 7. Recarregar nginx
echo "7Ô∏è‚É£ RECARREGANDO NGINX"
echo "-----------------------------------"

systemctl reload nginx
if [ $? -eq 0 ]; then
    echo "‚úÖ Nginx recarregado com sucesso"
else
    echo "‚ùå Erro ao recarregar nginx"
    echo "üìù Status do nginx:"
    systemctl status nginx --no-pager -l
    exit 1
fi
echo ""

# 8. Verificar sites ativos
echo "8Ô∏è‚É£ VERIFICANDO SITES ATIVOS"
echo "-----------------------------------"

echo "üìã Sites habilitados ap√≥s corre√ß√£o:"
ls -la /etc/nginx/sites-enabled/ | grep -v "^total" | grep -v "^d" | awk '{print "   ‚úÖ " $9}'
echo ""

# 9. Testar conectividade
echo "9Ô∏è‚É£ TESTANDO CONECTIVIDADE"
echo "-----------------------------------"

echo "üîç Testando resposta HTTP..."
HTTP_RESPONSE=$(curl -s -H "Host: $DOMAIN" http://127.0.0.1 --max-time 10 2>/dev/null | head -20)

if echo "$HTTP_RESPONSE" | grep -q "Todos Por Um"; then
    echo "‚úÖ Site respondendo corretamente!"
    echo "üéâ T√≠tulo encontrado no HTML"
elif echo "$HTTP_RESPONSE" | grep -q "Welcome to nginx"; then
    echo "‚ùå Ainda mostrando p√°gina padr√£o do nginx"
    echo "üîß Poss√≠vel problema de cache ou configura√ß√£o"
else
    echo "‚ö†Ô∏è Resposta n√£o identificada"
    echo "üìù Primeiras linhas da resposta:"
    echo "$HTTP_RESPONSE" | head -5
fi

echo ""
echo "üîí Testando HTTPS..."
HTTPS_RESPONSE=$(curl -s -H "Host: $DOMAIN" https://127.0.0.1 -k --max-time 10 2>/dev/null | head -20)

if echo "$HTTPS_RESPONSE" | grep -q "Todos Por Um"; then
    echo "‚úÖ HTTPS respondendo corretamente!"
elif echo "$HTTPS_RESPONSE" | grep -q "Welcome to nginx"; then
    echo "‚ùå HTTPS ainda mostrando p√°gina padr√£o"
else
    echo "‚ö†Ô∏è HTTPS: resposta n√£o identificada"
fi
echo ""

# 10. Verificar logs
echo "üîü VERIFICANDO LOGS"
echo "-----------------------------------"

echo "üìù √öltimas entradas do log de erro:"
tail -5 /var/log/nginx/error.log 2>/dev/null || echo "   Nenhum erro recente"

echo ""
echo "üìù √öltimas entradas do log do site:"
tail -5 /var/log/nginx/todos-por-um-access.log 2>/dev/null || echo "   Nenhum acesso registrado ainda"
echo ""

# 11. Limpar cache se necess√°rio
echo "1Ô∏è‚É£1Ô∏è‚É£ LIMPANDO CACHE"
echo "-----------------------------------"

echo "üßπ Limpando cache do nginx..."
# Limpar cache do nginx se existir
if [ -d "/var/cache/nginx" ]; then
    rm -rf /var/cache/nginx/*
    echo "‚úÖ Cache do nginx limpo"
fi

# Recarregar novamente para garantir
systemctl reload nginx
echo "‚úÖ Nginx recarregado novamente"
echo ""

# 12. Resultado final
echo "üéâ CORRE√á√ÉO CONCLU√çDA!"
echo "========================================"

echo "üìã Status final:"
echo "   ‚Ä¢ Sites padr√£o: ‚ùå Desabilitados"
echo "   ‚Ä¢ Site todos-por-um: ‚úÖ Habilitado"
echo "   ‚Ä¢ Prioridade: ‚úÖ Configurada"
echo "   ‚Ä¢ Configura√ß√£o: ‚úÖ V√°lida"
echo ""

echo "üåê Teste os URLs:"
echo "   ‚Ä¢ HTTP: http://$VPS_IP"
echo "   ‚Ä¢ HTTP: http://$DOMAIN"
echo "   ‚Ä¢ HTTPS: https://$VPS_IP"
echo "   ‚Ä¢ HTTPS: https://$DOMAIN"
echo ""

echo "üîß Comandos para debug:"
echo "   ‚Ä¢ Ver configura√ß√£o ativa: nginx -T | grep -A 20 'server_name'"
echo "   ‚Ä¢ Logs em tempo real: tail -f /var/log/nginx/todos-por-um-*.log"
echo "   ‚Ä¢ Testar diretamente: curl -H 'Host: $DOMAIN' http://127.0.0.1"
echo "   ‚Ä¢ Verificar arquivos: ls -la $SITE_DIR/"
echo ""

echo "‚úÖ Se ainda mostrar p√°gina padr√£o, aguarde 1-2 minutos para cache limpar"
echo "========================================"